[
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact Me",
    "section": "",
    "text": "Want to get in touch? The best way is via email."
  },
  {
    "objectID": "directions.html",
    "href": "directions.html",
    "title": "Directions",
    "section": "",
    "text": "English directions"
  },
  {
    "objectID": "directions.html#directions-en-fran√ßais",
    "href": "directions.html#directions-en-fran√ßais",
    "title": "Directions",
    "section": "Directions en fran√ßais",
    "text": "Directions en fran√ßais\nSe rendre √† l‚Äô√âTS. Une fois √† l‚Äô√âTS¬†:\n\nVous rendre au pavillon A: 1100, rue Notre-Dame Ouest\nUtiliser l‚Äôentr√©e principale (coin Peel et Notre-Dame), mais ne pas prendre l‚Äôascenseur pr√®s de l‚Äôentr√©e principale.\nAller √† la caf√©t√©ria, puis √† gauche des caisses, vous verrez deux ascenseurs vitr√©s et un autre en face. Prendre l‚Äôun des trois ascenseurs.\nSi vous venez √† mon bureau, A-4471:\n\nVous rendre au 4e √©tage.\nEn sortant des ascenseurs vitr√©s, aller √† droite puis vous verrez l‚Äôentr√©e du D√©partement de g√©nie logiciel et des TI.\nSi vous √™tes √† l‚Äôext√©rieur des heures d‚Äôouverture du d√©partement, utiliser le t√©l√©phone √† droite de la porte pour me rejoindre au 8638.\nPuis vous rendre √† mon bureau au A-4471.\n\n\nMerci √† mon coll√®gue Eric Paquette pour avoir √©crit ces renseignements pour ses √©tudiants."
  },
  {
    "objectID": "directions.html#english-directions",
    "href": "directions.html#english-directions",
    "title": "Directions",
    "section": "English directions",
    "text": "English directions\nGo to √âTS. Once there,\n\nEnter building A at 1100 Notre-Dame Street West\nUse the main entrance (at the corner of Peel and Notre-Dame), but do not take the elevator next to the main entrance.\nGo to the cafeteria, then to the left of the cashiers you will see two glass-window elevators. Use any of the three elevators found there.\nIf you are going to my office, A-4471:\n\nGo to the 4th floor.\nAfter exiting the glass elevators, turn right and you will see the entrance of the D√©partement de g√©nie logiciel et des TI.\nShould the department be closed, use the phone to the right of the door to contact me at 8638.\nFinally, go to my office at door A-4471.\n\n\nThanks to my colleague Eric Paquette for writing these instructions for his students."
  },
  {
    "objectID": "posts/plantuml-gizmo-docs-slides/index.html",
    "href": "posts/plantuml-gizmo-docs-slides/index.html",
    "title": "PlantUML Gizmo bundled for Google Docs and Slides",
    "section": "",
    "text": "I recently updated the PlantUML Gizmo add-on as a bundle for Google Docs and Google Slides.\nYou will find more sample diagrams in the editor, including the latest non-UML diagrams supported by PlantUML (see below).\nHere‚Äôs a video of the features in Google Slides:\n\n\n\n\n\n\n\nWireframe graphical interface (SALT) image\n\n\n\n\n\n\n\n\nArchiMate image\n\n\n\n\n\n\n\n\nSDL image\n\n\n\n\n\n\n\n\nGantt chart image\n\n\n\n\n\n\n\n\nMindMap image\n\n\n\n\n\n\n\n\nWork Breakdown Structure image\n\n\n\n\n\n\n\n\nMathematics image"
  },
  {
    "objectID": "posts/plantuml-gizmo-docs-slides/index.html#plantuml-gizmo-bundled-for-google-docs-and-slides",
    "href": "posts/plantuml-gizmo-docs-slides/index.html#plantuml-gizmo-bundled-for-google-docs-and-slides",
    "title": "PlantUML Gizmo bundled for Google Docs and Slides",
    "section": "",
    "text": "I recently updated the PlantUML Gizmo add-on as a bundle for Google Docs and Google Slides.\nYou will find more sample diagrams in the editor, including the latest non-UML diagrams supported by PlantUML (see below).\nHere‚Äôs a video of the features in Google Slides:\n\n\n\n\n\n\n\nWireframe graphical interface (SALT) image\n\n\n\n\n\n\n\n\nArchiMate image\n\n\n\n\n\n\n\n\nSDL image\n\n\n\n\n\n\n\n\nGantt chart image\n\n\n\n\n\n\n\n\nMindMap image\n\n\n\n\n\n\n\n\nWork Breakdown Structure image\n\n\n\n\n\n\n\n\nMathematics image"
  },
  {
    "objectID": "posts/markdown-in-gift/index.html",
    "href": "posts/markdown-in-gift/index.html",
    "title": "Getting the most from markdown in GIFT",
    "section": "",
    "text": "Markdown  is a format supported within GIFT (see: Creating questions quickly in Moodle with GIFT), which can be used for simple formatting text in a question, in answers and feedback:\nBut, formatting code blocks or nested lists in Moodle requires some deeper understanding, because of the meanings of characters in the two formats. The solutions require escaping certain characters, which complicates the GIFT files. The good news is that using a smart editor, such as the GIFT Format Pack extension in VSCode, can make it less painful."
  },
  {
    "objectID": "posts/markdown-in-gift/index.html#conclusion",
    "href": "posts/markdown-in-gift/index.html#conclusion",
    "title": "Getting the most from markdown in GIFT",
    "section": "Conclusion",
    "text": "Conclusion\nGIFT can get pretty ugly when you‚Äôre embedding markdown in it. But I still think it‚Äôs worth using, especially with the VSCode extension from Ethan Ou üéâ.\nIf you know of any other gotchas or work-arounds using markdown  in Moodle‚Äôs GIFT format, please leave a comment!"
  },
  {
    "objectID": "posts/github-api-in-pharo/index.html",
    "href": "posts/github-api-in-pharo/index.html",
    "title": "Using the GitHub API in Pharo 7",
    "section": "",
    "text": "In my mining activities with Pharo, I found it useful to query GitHub to select projects to mine according to their popularity (e.g., forks and stars)."
  },
  {
    "objectID": "posts/github-api-in-pharo/index.html#which-api-rest-or-graphql",
    "href": "posts/github-api-in-pharo/index.html#which-api-rest-or-graphql",
    "title": "Using the GitHub API in Pharo 7",
    "section": "Which API (REST or GraphQL)?",
    "text": "Which API (REST or GraphQL)?\nGitHub offers different ways to query its infrastructure. The traditional REST query is the v3 of its API, and a more powerful (which requires an authentication token) GraphQL v4 of its API."
  },
  {
    "objectID": "posts/github-api-in-pharo/index.html#rest-v3-api",
    "href": "posts/github-api-in-pharo/index.html#rest-v3-api",
    "title": "Using the GitHub API in Pharo 7",
    "section": "REST (v3 API)",
    "text": "REST (v3 API)\nGitHub‚Äôs v3 API for REST is OK for getting info about projects, such as the ones that have lots of stars or forks.\nHere‚Äôs a snippet of code to show how to use it in Pharo:\nznClient := ZnClient new.\njsonString := znClient\n    get:\n        'https://api.github.com/search/repositories?q=language:java+stars:&gt;=500+forks:&gt;100&sort=stars&order=desc&per_page=5'.\n\n\n\n\n\n\nNote\n\n\n\nNote the specifics in the query, e.g.¬†language:java and sort=stars. You can read more about these options on GitHub‚Äôs documentation for API v3.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThis query returns at most 5 results (per_page=5). Without this option, GitHub gives 30 results per query. It‚Äôs possible to get up to 100 results per query by setting per_page=100. To get multiple ‚Äúpages‚Äù, you specify the page number (page=2, page=3, etc.) in queries.\n\n\nThe jsonString is a JSON string response, which can be accessed nicely using NeoJSON (which must be loaded in your Pharo image).\n\nNeoJSON to get to the values\nAssuming you loaded NeoJSON, here‚Äôs how you could get to the values from the jsonString response above:\nqueryDic := NeoJSONReader fromString: jsonString.\nprojectsColl := (queryDic at: 'items')\n    collect: [ :item | \n        {(item at: 'full_name').\n        (item at: 'git_url').\n        (item at: 'watchers_count').\n        (item at: 'forks_count')} ].\n\nprojectsColl asString\n\"'#(#(''iluwatar/java-design-patterns'' ''git://github.com/iluwatar/java-design-patterns.git''\n      45632 14784)\n    #(''elastic/elasticsearch'' ''git://github.com/elastic/elasticsearch.git''\n      39349 13141)\n    #(''ReactiveX/RxJava'' ''git://github.com/ReactiveX/RxJava.git''\n      38107 6443)\n    #(''spring-projects/spring-boot'' ''git://github.com/spring-projects/spring-boot.git''\n      35550 23522)\n    #(''kdn251/interviews'' ''git://github.com/kdn251/interviews.git''\n      33272 6610))'\"\nIt‚Äôs not bad, but I was hoping to get data about how many issues (total) existed for projects. This proved troublesome with version 3 of the REST API. It‚Äôs possible, but requires multiple calls, which amounts to separate requests through each repo‚Äôs issues page. Googling this problem, I found the mention of GitHub encouraging people to move to GraphQL."
  },
  {
    "objectID": "posts/github-api-in-pharo/index.html#graphql-v4-api",
    "href": "posts/github-api-in-pharo/index.html#graphql-v4-api",
    "title": "Using the GitHub API in Pharo 7",
    "section": "GraphQL (v4 API)",
    "text": "GraphQL (v4 API)\nGraphQL is more complex, but in theory more powerful. You have to do POST requests, and you need an authorization token (which means GitHub tracks what you are doing). Since the responses are still in JSON, NeoJSON can pick them apart for you as before.\nSo, here‚Äôs what I did according to the instructions from GitHub:\n\nI first created a token with scope repo (and all repo sub-scopes). I described it as a GitHub repo mining token. For obvious reasons, I don‚Äôt reveal the token here in my examples.\nBefore making the first query call, I make a call to login with the token{:text-decoration=‚Äúunderline‚Äù}.\nI specify the token on subsequent calls as before.\n\nHere‚Äôs a Playground script that could be converted easily to a class with methods:\n| graphQLLoginString graphQLGetIssueCount doGraphQLQuery myAPIToken response queryDic issueCount |\ngraphQLLoginString :=\n    'query { viewer { login }}'.\ngraphQLGetIssueCount :=\n    'query { repository(owner:\"isaacs\", name:\"github\") {issues(states:OPEN) {totalCount}}}'.\n\"Get a token for repo scope\n at https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line\"\nmyAPIToken := 'GET_YOUR_TOKEN_FROM_GIT_HUB_AND_PUT_IT_HERE'.\n\"block closure to be called like a method\"\ndoGraphQLQuery := [ :authToken :graphQLquery | \n    | escaper |\n    \"escape any double-quotes in the GraphQL query\"\n    escaper := [ :stringToEscape | \n        stringToEscape copyWithRegex: '\\\"' matchesReplacedWith: '\\\"' ].\n    ZnClient new\n        url: 'https://api.github.com/graphql';\n        headerAt: 'Authorization' put: 'bearer ' , authToken;\n        entity:\n            (ZnEntity\n                with: '{\"query\": \"' , (escaper value: graphQLquery) , '\"}'\n                type: ZnMimeType applicationJson);\n        post ].\n\"Log in first, should check for errors in the response\"\nresponse := doGraphQLQuery\n    value: myAPIToken value: graphQLLoginString.\n\"Do the query to get the number of issues\"\nresponse := doGraphQLQuery\n    value: myAPIToken\n    value: graphQLGetIssueCount.\n\"Pull the number out of the JSON\"\nqueryDic := NeoJSONReader fromString: response.\nissueCount := ((((queryDic at: 'data') at: 'repository') at: 'issues')\n    at: 'totalCount') asInteger\nPhoto credit"
  },
  {
    "objectID": "posts/dsm-moose-java/index.html",
    "href": "posts/dsm-moose-java/index.html",
    "title": "Dependency Structure Matrix for a Java project using Moose",
    "section": "",
    "text": "As an extension to Analyzing Java With Moose, in this post I will show how one can create a Design Structure Matrix (DSM) in Moose, in particular from a model of a Java project.\nFirst, you need to generate and load an MSE file into Moose for a Java project. Refer to this post for those steps, which uses the Java code from from Head First Design Patterns.\nRoassal (which is a visualization platform that‚Äôs part of Moose) has a visualization for DSM called RTDSM. It‚Äôs explained here, but with Pharo classes. How to use it with Moose on a Java model?\nThe key is in the dependency: block, which we define using a Moose Query with allClients. Open a Moose Playground and paste the following Pharo code:\n| dsm classes |\ndsm := RTDSM new.\nclasses := (MooseModel root first allModelClasses\n    select: [ :c | \n        c mooseName\n            beginsWith: \n                'headfirst::designpatterns::combining::decorator' ])\n    reject: #isAnonymousClass.\n\"Avoid arbitrary ordering by sorting\"\ndsm objects: (classes asSortedCollection: [ :a :b | a name &lt; b name]).\n\"Change the default label from asString which is very long\"\ndsm labelShapeX label text: #name.\ndsm labelShapeY label text: #name.\n\"Moose Query equivalent to #dependentClasses for a Pharo class\"\ndsm dependency: #allClients.\ndsm rotation: 270.\n^dsm\n\n\n\nRoassal DSM visualization\n\n\nThis visualization may not be as powerful as IDEA‚Äôs DSM analysis or Lattix‚Äôs, but it‚Äôs open source and can be manipulated in Pharo.\nIn Moose Query, the opposite to allClients is allProviders."
  },
  {
    "objectID": "posts/dsm-moose-java/index.html#dependency-structure-matrix-for-a-java-project-using-moose",
    "href": "posts/dsm-moose-java/index.html#dependency-structure-matrix-for-a-java-project-using-moose",
    "title": "Dependency Structure Matrix for a Java project using Moose",
    "section": "",
    "text": "As an extension to Analyzing Java With Moose, in this post I will show how one can create a Design Structure Matrix (DSM) in Moose, in particular from a model of a Java project.\nFirst, you need to generate and load an MSE file into Moose for a Java project. Refer to this post for those steps, which uses the Java code from from Head First Design Patterns.\nRoassal (which is a visualization platform that‚Äôs part of Moose) has a visualization for DSM called RTDSM. It‚Äôs explained here, but with Pharo classes. How to use it with Moose on a Java model?\nThe key is in the dependency: block, which we define using a Moose Query with allClients. Open a Moose Playground and paste the following Pharo code:\n| dsm classes |\ndsm := RTDSM new.\nclasses := (MooseModel root first allModelClasses\n    select: [ :c | \n        c mooseName\n            beginsWith: \n                'headfirst::designpatterns::combining::decorator' ])\n    reject: #isAnonymousClass.\n\"Avoid arbitrary ordering by sorting\"\ndsm objects: (classes asSortedCollection: [ :a :b | a name &lt; b name]).\n\"Change the default label from asString which is very long\"\ndsm labelShapeX label text: #name.\ndsm labelShapeY label text: #name.\n\"Moose Query equivalent to #dependentClasses for a Pharo class\"\ndsm dependency: #allClients.\ndsm rotation: 270.\n^dsm\n\n\n\nRoassal DSM visualization\n\n\nThis visualization may not be as powerful as IDEA‚Äôs DSM analysis or Lattix‚Äôs, but it‚Äôs open source and can be manipulated in Pharo.\nIn Moose Query, the opposite to allClients is allProviders."
  },
  {
    "objectID": "posts/running-pharo-in-WSL/index.html",
    "href": "posts/running-pharo-in-WSL/index.html",
    "title": "Running Pharo in Windows Subsystem for Linux (WSL)",
    "section": "",
    "text": "Pharo 7 runs well in Windows 10 (I have a Surface Pro 4), but I wanted to do some testing of a project also under Linux. Initially I had run Ubuntu in a VM VirtualBox, but given Windows Subsystem for Linux (WSL) is now Ubuntu 18 and is much lighter weight on disk space, I wanted to see if it would work with Pharo.\n\n\n\nSurface Pro running Ubuntu in WSL\n\n\nSince Pharo.org doesn‚Äôt yet have specific instructions for installing on Ubuntu 18, I was unsure how to proceed. So, I went with the KISS principle and did a command-line (ZeroConf) install, which was successful. Here are the steps:\n\nInstall and activate WSL following Microsoft‚Äôs instructions.\nInstall an X Server for Windows. I used VcXsrv installed with Chocolatey (to make updating easy) and set it up like this:\n\nRun XLaunch from the start menu, which invokes a wizard.\nAccept all the defaults on the wizard.\nAt the last page of the wizard, click Save configuration specifying %appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup to have VcXsrv start automatically when you start Windows.\n\nIn WSL, you must export DISPLAY=localhost:0 (e.g., in your WSL ~/.bashrc).\nInstall Mesa with the command sudo apt install mesa-utils. This is apparently needed because there are missing libraries for the X11 display used by Pharo. I‚Äôm not sure if this is the official dependency, but it worked in my case. For reference, if you don‚Äôt do this step, you‚Äôll get the following message that‚Äôs somewhat misleading IMO:\n$ ./pharo-ui\ncould not find display driver vm-display-X11; either:\n- check that /home/myusername/pharo-dir/pharo-vm/lib/pharo/5.0-201901051900//vm-display-X11.so exists, or\n- use the '-plugins &lt;path&gt;' option to tell me where it is, or\n- remove DISPLAY from your environment.\nInstall Pharo with ZeroConf command line as below:\nmkdir MyPharo\ncd MyPharo/\ncurl -L https://get.pharo.org/64/ | bash\nStart the X Server on Windows (e.g., XLaunch from the Start menu in Windows 10).\nRun Pharo and have fun in Ubuntu 18 (WSL)\n./pharo-ui\n\n\n\nPharo 7 Unix running in an XWindow\n\n\n\nIt also works with the Pharo Launcher.\n\nEdit: Installing Pharo Launcher\nHere are the steps to install Pharo Launcher in WSL from the command line:\n\nDownload the latest version of the Linux 64 version of Pharo Launcher to your home directory:\ncd\ncurl -o pharo-launcher.zip -L https://files.pharo.org/pharo-launcher/linux64\nUnzip it (you may need to install the unzip tool with sudo apt install unzip):\nunzip pharo-launcher.zip\nNormally this will create a ~/pharolauncher directory.\nRun Pharo Launcher with the following command:\npharolauncher/pharo-launcher &\n\n\n\nEdit: Shortcut to launch from Windows\nI removed these instructions from my page, because stopping Pharo Launcher abnormally (when started from a Windows command) sometimes results in stopping of all the images that were launched from the launcher (without any chance to save), which is a rather unpleasant surprise.\n\n\nEdit: Make the cursor bigger on hi-resolution screens\nI use WSL on a Surface Pro, which has a very high resolution screen. This results in a very, very tiny cursor. If you set the SQUEAK_FAKEBIGCURSOR environment variable before launching Pharo, the cursor is definitely bigger:\nexport SQUEAK_FAKEBIGCURSOR=1\n\n\nEdit: Fix the keyboard if needed\nPharo runs in an X window, which doesn‚Äôt unfortunately retain the settings for the keyboard from Windows. If you have a keyboard with dead-keys (I was using US International), my WSL defaults to that and it‚Äôs not possible to type the comment \" character in Pharo. The solution I found is to execute the following on the WSL command line:\nsetxkbmap us -variant euro\nTo make the change ‚Äúpermanent,‚Äù add it to the end of ~/.profile."
  },
  {
    "objectID": "posts/oer-in-french/index.html",
    "href": "posts/oer-in-french/index.html",
    "title": "Open Educational Resource (OER) in French",
    "section": "",
    "text": "For the ‚ÄúJourn√©e d‚ÄôInnovation P√©dagogique‚Äù of the √âTS, I presented the work I did on creating an Open Education Resource (OER) for a course I teach.\nThanks to funding from the fabriqueREL, my university (√âTS) was able to produce an Open Educational Resource (OER or Ressource √âducative Libre) for the manual of the course I teach called Analyse et conception de logiciels (Software analysis and design). It has been released under the Creative Commons license, and was created using Quarto (the next generation of R Markdown) software.\nHere are a couple of presentations about the process and product:\n\nCreating an OER with Open Source Tools (presentation in French and English)\nL‚Äôauto√©quipement dans la cr√©ation d‚Äôune REL ‚ÄúDogfooding while creating an OER‚Äù (presentation in French).\n\nPhoto credit: ‚ÄúLightbulb, Idea, Innovation‚Äù (CC0 Public Domain) by mohamed mahmoud hassan"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Christopher Fuhrman",
    "section": "",
    "text": "I‚Äôm a software engineering professor at √âcole de technologie sup√©rieure (lire ma page en fran√ßais), where I teach courses on software engineering, specifically in software design.\nMy research interests include software migration, testing, quality, and architecture."
  },
  {
    "objectID": "index.html#who-am-i",
    "href": "index.html#who-am-i",
    "title": "Christopher Fuhrman",
    "section": "",
    "text": "I‚Äôm a software engineering professor at √âcole de technologie sup√©rieure (lire ma page en fran√ßais), where I teach courses on software engineering, specifically in software design.\nMy research interests include software migration, testing, quality, and architecture."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Christopher Fuhrman",
    "section": "",
    "text": "I‚Äôm a software developer and professor of software engineering at the √âcole de technologie sup√©rieure (ETS) in Montreal. Find out more here.\nHere are directions to find my office at ETS."
  },
  {
    "objectID": "posts/typescript-famix-generics/index.html",
    "href": "posts/typescript-famix-generics/index.html",
    "title": "Improved modeling of TypeScript generics and their concretizations",
    "section": "",
    "text": "The ts2famix npm package provides the ability to analyze TypeScript projects by breaking down their components and generating a model with detailed information. However, both ts2famix and its corresponding metamodel initially had limitations in accurately recognizing parametric elements and concretization relationships. During my Summer 2024 internship, I focused on improving the recognition of these elements and their representation, enhancing their accuracy in both the ts2famix-generated JSON file and our metamodel."
  },
  {
    "objectID": "posts/typescript-famix-generics/index.html#assumptions",
    "href": "posts/typescript-famix-generics/index.html#assumptions",
    "title": "Improved modeling of TypeScript generics and their concretizations",
    "section": "Assumptions",
    "text": "Assumptions\nIn this post, we assume familiarity with TypeScript‚Äôs generic types and their usage. We‚Äôll explore how generics and concretization relationships are represented in both our metamodel and ts2famix."
  },
  {
    "objectID": "posts/typescript-famix-generics/index.html#understanding-genericity-and-concretization",
    "href": "posts/typescript-famix-generics/index.html#understanding-genericity-and-concretization",
    "title": "Improved modeling of TypeScript generics and their concretizations",
    "section": "Understanding Genericity and Concretization",
    "text": "Understanding Genericity and Concretization\nGenericity refers to the ability to define classes, methods, or types that can operate on different data types. In TypeScript, generics allow developers to write reusable code that can handle various data types while maintaining type safety.\n// Parametric Class\nclass ClassA&lt; T &gt; {\n    private value: T;\n    constructor(value: T) {\n        this.value = value;\n    }\n}\nFor example, a generic class like ClassA can be defined with a type parameter T, making it flexible to work with different types, but it cannot be used without specifying the type for T.\nConcretization occurs when these generic types are assigned specific values or types, turning abstract type parameters into concrete instances.\nclass ClassB extends ClassA&lt; string &gt; {\n  // In Famix, ClassA is modeled as a ParametricClass with type string\n  // ClassB and string are modeled as Class and PrimitiveType, respectively\n}\nIn the case of ClassA, concretization would involve setting T to a specific type like string.\nClassA&lt; T &gt; { /* ... */ }\n\nClassB extends ClassA&lt; string &gt; { /* ... */ }\n\n// Modeling the relations in Famix:\n// ClassA&lt; T &gt;  ==Concretization==&gt;  ClassA&lt; string &gt;\n// T  ==ParameterConcretization==&gt;  string\nIn this example, we have two classes: ClassA&lt; T &gt;, a generic class with the parameter T, and ClassA&lt; string &gt;, a concrete class where T is specified as string. This illustrates a concretization relationship between ClassA&lt; T &gt; and ClassA&lt; string &gt;, as well as a parameter concretization relationship between the generic parameter T and the concrete parameter string.\n\n\n\n\n\n\nNote\n\n\n\nThis example is explained in detail (with an example in Java) throughout this blog post."
  },
  {
    "objectID": "posts/typescript-famix-generics/index.html#implementation-in-the-famixtypescript-metamodel",
    "href": "posts/typescript-famix-generics/index.html#implementation-in-the-famixtypescript-metamodel",
    "title": "Improved modeling of TypeScript generics and their concretizations",
    "section": "Implementation in the FamixTypeScript Metamodel",
    "text": "Implementation in the FamixTypeScript Metamodel\nNow that we‚Äôve established a theoretical understanding of generics and concretization, we can see how these concepts were implemented in our metamodel.\n\n\n\nTypeScript Metamodel (Famix) with generics and concretizations.\n\n\nOur metamodel includes 8 new classes:\n\nFive representing the core generic structures: ParametricClass, ParametricInterface, ParametricFunction, ParametricMethod, and ParametricArrowFunction.\nA ParameterType, which refers to the parameters of a parametric element.\nTwo classes, Concretisation and ParameterConcretisation, defining relationships between parametric elements and between parameter types, respectively.\n\nThe use of traits has been key in organizing parametric elements and concretizations, allowing us to handle them in a structured, modular way.\nWe have 5 new traits in our meta-model:\n\nTParametricEntity is a general type used by all parametric entities, including ParametricClass, ParametricInterface, ParametricFunction, ParametricMethod, and ParametricArrowFunction.\nTConcreteParameterType represents concrete parameters.\nTGenericParameterType represents generic parameters.\n\nTConcretisation establishes a link between two TParametricEntity instances. A TParametricEntity can have one or more concretizations with other TParametricEntity objects. Each TParametricEntity that is a concretization of another holds a reference to its generic entity.\nTParameterConcretisation works similarly to TConcretisation, but instead of linking two TParametricEntity instances, it connects a TConcreteParameterType with a TGenericParameterType. A TGenericParameterType can have multiple concretizations, and a TConcreteParameterType contains references to its generics.\n\n\n\n\n\n\n\nNote\n\n\n\nThese relations are explained in detail throughout this blog post."
  },
  {
    "objectID": "posts/typescript-famix-generics/index.html#unified-approach-in-the-metamodel-and-ts2famix",
    "href": "posts/typescript-famix-generics/index.html#unified-approach-in-the-metamodel-and-ts2famix",
    "title": "Improved modeling of TypeScript generics and their concretizations",
    "section": "Unified Approach in the Metamodel and ts2famix",
    "text": "Unified Approach in the Metamodel and ts2famix\nBoth our metamodel and the ts2famix npm package share a consistent approach to representing generics and concretization relationships. In our metamodel, parametric elements and their concretizations are modeled clearly to reflect the relationships between abstract types and their concrete instances. These representations are aligned with how ts2famix handles generics in TypeScript projects, ensuring that improvements in the recognition of parametric elements are mirrored in both the model and the code analysis process."
  },
  {
    "objectID": "posts/typescript-famix-generics/index.html#conclusion",
    "href": "posts/typescript-famix-generics/index.html#conclusion",
    "title": "Improved modeling of TypeScript generics and their concretizations",
    "section": "Conclusion",
    "text": "Conclusion\nIn this post, we‚Äôve explored how generics and concretization relationships are modeled both in our metamodel and the ts2famix npm package. By ensuring a consistent approach across both systems, we‚Äôve enhanced the accuracy and usability of these parametric elements in TypeScript project analysis."
  },
  {
    "objectID": "posts/typescript-in-moose/index.html",
    "href": "posts/typescript-in-moose/index.html",
    "title": "TypeScript support for Moose (Pharo)",
    "section": "",
    "text": "It‚Äôs now possible to model and analyze TypeScript projects in Moose.\nThanks to excellent collaboration with summer 2023 interns Eya Bdah (ISSAT of Sousse University) and Ma√´l Paul (ENSEIRB-MATMECA Bordeaux), several former students of MGL843 who contributed to the open-source elements of this project, and last but not least, Inria‚Äôs EVREF (formerly RMoD) group, there is a stable Famix metamodel and importer (aka parser) for TypeScript. The importer ts2famix is also an npmjs package, which means you can easily install and run it if you use npm."
  },
  {
    "objectID": "posts/typescript-in-moose/index.html#assumptions",
    "href": "posts/typescript-in-moose/index.html#assumptions",
    "title": "TypeScript support for Moose (Pharo)",
    "section": "Assumptions",
    "text": "Assumptions\nIn this post, I‚Äôll show you how to use these tools to analyze a TypeScript project using Moose 10. We assume the reader is familiar with cloning GitHub projects and running npm commands (since we‚Äôre analyzing TypeScript), as well as using the git bash command-line tool. We tested this on Windows 10 (again using git bash), but it should work on Linux and Mac, too."
  },
  {
    "objectID": "posts/typescript-in-moose/index.html#moose-needs-to-grok-typescript",
    "href": "posts/typescript-in-moose/index.html#moose-needs-to-grok-typescript",
    "title": "TypeScript support for Moose (Pharo)",
    "section": "Moose needs to grok TypeScript",
    "text": "Moose needs to grok TypeScript\nThe Moose software needs a metamodel to understand TypeScript programs. Our project provides this metamodel at https://github.com/fuhrmanator/FamixTypeScript.\nThe following instructions are for people familiar with Moose and Pharo. If you need help with Pharo images, check out the Pharo Mooc.\n\nCreate and run a Moose 10 (stable) image.\nOpen a Playground and run this script to load the FamixTypeScript metamodel:\nMetacello new \n    githubUser: 'fuhrmanator' project: 'FamixTypeScript' commitish: 'master' path: 'src';\n    baseline: 'FamixTypeScript';\n    load"
  },
  {
    "objectID": "posts/typescript-in-moose/index.html#create-the-moose-famix-model-of-a-typescript-project",
    "href": "posts/typescript-in-moose/index.html#create-the-moose-famix-model-of-a-typescript-project",
    "title": "TypeScript support for Moose (Pharo)",
    "section": "Create the Moose (Famix) model of a TypeScript project",
    "text": "Create the Moose (Famix) model of a TypeScript project\n\nLet‚Äôs clone the project https://github.com/Chuzzy/Emojiopoly.\nNext, we‚Äôll install ts2famix (it‚Äôs an npm command, so you need to have npm running on your machine):\nnpm i -g ts2famix\nLet‚Äôs move into the Emojiopoly clone‚Äôs location, and create a Famix model of the project:\ncd path/to/Emojiopoly\nts2famix -i tsconfig.json -o emojiopoly-model.json\nThis will create the model emojiopoly-model.json in the same directory as the Emojiopoly clone."
  },
  {
    "objectID": "posts/typescript-in-moose/index.html#import-the-model-into-moose",
    "href": "posts/typescript-in-moose/index.html#import-the-model-into-moose",
    "title": "TypeScript support for Moose (Pharo)",
    "section": "Import the model into Moose",
    "text": "Import the model into Moose\n\nIf you‚Äôre running Windows (maybe this works on a Mac, too?), you can drag the emojiopoly-model.json file and drop it on the running window of Moose. You‚Äôll see a dialog allowing you to confirm the import. \nIf you‚Äôre not able to drag the file, move the emojiopoly-model.json file generated by ts2famix to the same folder as the Moose image. The folder has a path like Documents/Pharo/images/[Moose image name]. Tip: you can find the folder of the image by right-clicking on the image in Pharo Launcher and selecting Show in folder.\nIn the Moose image, open a Playground (CTRL-O CTRL-W) and run the following script:\n'emojiopoly-model.json' asFileReference readStreamDo:\n    [ :stream | model := FamixTypeScriptModel new \n      importFromJSONStream: stream. model install ].\nThis will load the model into Moose.\nOpen the menu Moose &gt; Models browser to verify that the model of Emojiopoly has been loaded into Moose. You should see emojiopoly-model (or whatever the name you used for the .json file) in the list of Models."
  },
  {
    "objectID": "posts/typescript-in-moose/index.html#do-some-analyses-on-the-model",
    "href": "posts/typescript-in-moose/index.html#do-some-analyses-on-the-model",
    "title": "TypeScript support for Moose (Pharo)",
    "section": "Do some analyses on the model",
    "text": "Do some analyses on the model\nYou can do any analysis you want on the model, but here is how to get started:\n\nFrom the Models browser window, select emojiopoly-model from the list.\nClick on the Inspect button (icon with glasses).\nA new Moose Inspector window will appear.\nClick on Card in the left-hand list.\nYou will see a sub-window a FamixTypeScriptClass (Card) on the left.\nClick on the SourceText tab at the top of this sub-window to view the source code of the class.\nClick on the Moose Properties tab to view the Moose properties of this class.\n\n\n\nInspecting a FamixTypeScriptClass\n\n\n\n\nSimple Queries\nIn a Playground window, execute the following code:\n\"Get the emojiopoly model (first in Moose panel)\"\ntsModel := MooseModel root first.\n\"Find all classes that have 100 or more lines of code\"\nbigClasses := tsModel allModelClasses \n    select: [ :each | \n        each numberOfLinesOfCode &gt;= 100 ]\nThe result should generally include only one class, `MonopolyGame``. You can select it and view its source code to verify it has more than 100 lines.\nIn the Navigation tab, you can also see its methods, attributes, and more.\nTo get a list of long methods (containing 20 lines or more) in the project, execute this script:\n\"Get the emojiopoly model (first in Moose panel)\"\ntsModel := MooseModel root first.\n\"Find all methods that have 20 or more lines of code\"\nlongMethods := tsModel allMethods \n    select: [ :each | \n        each numberOfLinesOfCode &gt;= 20 ]\nTo find out the class to which each method belongs, check the parentType property in the navigation.\n\n\nTypeScript-specific Queries\nWhat if you want to find all Decorators (a TypeScript-specific element) in a project? Sadly, there is not (yet) a tsModel allDecorators method for TypeScript models. The solution is to use the tsModel allMatching: FamixTypeScriptDecorator. Indeed, the allMatching: method allows you to find all elements of a specific Entity. You can see the TypeScript metamodel element names in the SVG visualization from the metamodel repository. The elements are shown as UML classes in light blue, e.g., Module, Decorator, etc. Note that you need to add the prefix FamixTypeScript to the name of the element, e.g., FamixTypeScriptModule, FamixTypeScriptDecorator, etc.\n\n\nVisualizations with Roassal 3\nRoassal 3 a powerful (and complex) visualization library in Pharo. We can draw inspiration from an example of a Roassal 3 visualization on GitHub to represent classes visually in a Moose model:\n\"The variable classes contains the classes we would like to visualize\"\nclasses := MooseModel root first allModelClasses.\n\"A canvas is a container of graphical shapes\"\nc := RSCanvas new.\n\"Each class is represented as a box\"\nclasses do: [ :aClass | c add: (RSBox new model: aClass) ].\n\"The width of each class indicates the number of variables defined in the class\"\nRSNormalizer width shapes: c shapes; from: 6; to: 20;\n    normalize: #numberOfAttributes.\n\"Height of each class represents the number of methods\"\nRSNormalizer height shapes: c shapes; normalize: #numberOfMethods.\n\"A class color goes from gray to red, indicating the number of lines of code\"\nRSNormalizer color shapes: c shapes;\n    from: Color gray; to: Color red; normalize: #numberOfLinesOfCode.\n\"Vertical lines indicate the inheritance relationship\"\nRSLineBuilder orthoVertical\n    canvas: c; withVerticalAttachPoint; color: Color lightGray;\n    connectFrom: #superclass.\n\"Use a tree layout to adequately locate the classes\"\nRSTreeLayout on: c nodes.\n\"We make all the classes draggable and with a contextual popup window\"\nc nodes @ RSDraggable @ RSPopup.\n\"The whole visualization is zoomable, draggable, and shapes may be searched in it\"\nc @ RSCanvasController.\nThis visualization represents classes as rectangles. Each rectangle has three dimensions:\n\nThe color of each rectangle represents the number of lines of code. Gray signifies a relatively low number of lines of code, while red indicates a relatively high number of lines of code. The color variation is handled by the RSNormalizer class.\nThe height of each rectangle represents the number of methods.\nThe width of each rectangle represents the number of attributes.\n\n\n\n\n\n\n\nTip\n\n\n\nThe visualization obtains data from each Moose element through properties, for example, #numberOfAttributes, #numberOfMethods, and #numberOfLinesOfCode. These are methods (accessors) of Famix elements, such as FamixTypeScriptClass, which provide the values. You can find other properties in the Moose Properties tab of these elements.\n\n\n\n\n\nRoassal visualization of Emojiopoly\n\n\nWith the Emojiopoly project, you can see that the MonopolyGame class has many methods (its height) and also a significant amount of code (its red color).\n\n\n\n\n\n\nTip\n\n\n\nThe Pharo syntax with the hashtag used on line 9, normalize: #numberOfAttributes, is a shorthand syntax for a longer block expression: normalize: [ :element | element numberOfAttributes ]. Sometimes, you may want to perform a calculation on the value used in the visualization, for example, combining it with another attribute like the number of receivingInvocations. In that case, you would do normalize: [ :element | element numberOfAttributes + element receivingInvocations size ].\n\n\nThe layout (RSTreeLayout) also helps visualize the class hierarchy in terms of inheritance. However, the Emojiopoly project, because TypeScript allows type composition, does not use inheritance. Therefore, no hierarchy is visible in the visualization.\n\n\nCheck out Moose 10‚Äôs new visualization tools\nThe latest version of Moose has some built-in features that make it fun to explore projects. Check out Gabriel Ullmann‚Äôs excellent video on using Moose 10. Please note that his demo is done with a Java project (model), but Moose analyses work almost the same way with a TypeScript project (once you‚Äôve loaded and imported a model of a TypeScript project)."
  },
  {
    "objectID": "posts/typescript-in-moose/index.html#whats-next",
    "href": "posts/typescript-in-moose/index.html#whats-next",
    "title": "TypeScript support for Moose (Pharo)",
    "section": "What‚Äôs next?",
    "text": "What‚Äôs next?\nThe FamixTypeScriptImporter (ts2famix) as well as the FamixTypeScript metamodel are still in development, so don‚Äôt forget to check for updates. Please report any issues you find on the respective GitHub repositories.\nLet us know if you are using (or want to use) FamixTypeScript to model your TypeScript projects!"
  },
  {
    "objectID": "posts/creating-questions-quickly-gift/index.html",
    "href": "posts/creating-questions-quickly-gift/index.html",
    "title": "Creating questions quickly in Moodle with GIFT",
    "section": "",
    "text": "I‚Äôve been using Moodle for several years in my courses, and it remains one of the best tools for online learning thanks to its flexible and powerful testing (quiz) capabilities. However, creating a quiz or question in Moodle requires so many clicks!\nI want to share here some solutions that don‚Äôt require creating questions in the GUI of Moodle, thanks to GIFT (General Input Format Template). GIFT is a text-based format for questions, kind of like a markdown for quizzes. Formally, one might call it a domain specific language (DSL). You can read more about the Moodle GIFT."
  },
  {
    "objectID": "posts/creating-questions-quickly-gift/index.html#why-i-like-gift",
    "href": "posts/creating-questions-quickly-gift/index.html#why-i-like-gift",
    "title": "Creating questions quickly in Moodle with GIFT",
    "section": "Why I like GIFT",
    "text": "Why I like GIFT\nGIFT has the advantage of allowing me to create questions quickly. It also has the advantage that it is text; if I want to maintain or share a set of questions (like a question bank), I can put it in a (private) git repository. Beware that because it is text, if you want to include images in your questions, you need to take some care. HTML and Markdown formats are supported, so it‚Äôs possible to store images in questions that way. Another way to store images is with inline data: URI. There are online tools that will convert images into data: URI format (beware they can be many lines of text!).\nAs with all markdown languages, there are drawbacks to GIFT (at least with how a Moodle site uses it):\n\nthe syntax is not easy for beginners (not a big deal, especially if you learned markdown)\nyou have to wait until you try to import the questions into Moodle to know if you‚Äôve got the syntax right (this one is pretty annoying).\n\nTo overcome these drawbacks (and to experiment with DSL tools in my software design courses), in 2016 I started working on a parsing expression grammar for GIFT, with the hope that it could be used for editors in the future. There are at least two tools based on this:\n\na recent and powerful extension for VSCode to support GIFT created by Ethan Ou,\na web-based GIFT editor is the proof of concept I made for the GIFT PEG.\n\n\nEditors for GIFT format\nLet‚Äôs look at how the editors work below.\n\nVSCode extension for GIFT\nVSCode has an extension that supports GIFT format. It has snippets (e.g., mc for inserting multiple-choice questions) and syntax highlighting to facilitate creating and editing GIFT questions. It has a preview of what your questions will look like when you import them into Moodle. I‚Äôve used this extension to make lots of questions and it works very well.\n\n\n\nGIFT in VSCode\n\n\n\n\nBrowser-based GIFT editor\nIf you don‚Äôt want to install VSCode, there‚Äôs also a light version of an editor based on the grammar that runs in a modern web browser. There‚Äôs no function to save your work, but you copy the contents of the editor and save them to your own text file. It has a drop-down menu of sample questions, and it gives some hints if you have syntax errors. Finally you can preview what your questions look like, and even print the page (to PDF) for a hard-copy of a quiz.\n\n\n\nGIFT Editor web page\n\n\n\n\n\nAlternative scoring when there is more than one right answer\nOften I want to make a quiz question that has more than one right answer:\n\nWhich of the following are perennial herbs?\na) basil (wrong)\nb) dill (wrong)\nd) fennel (correct)\nc) mint (correct)\n\nMoodle allows multiple-choice questions with more than one correct answer; the answers are presented as checkboxes. The way I would score this (if it were a test on paper) is that it‚Äôs a 4-part answer. Checking (or not) an answer is 1/4 of the value. In fact, this way to grade is considered a best practice in HotPotatoes.\nSadly, Moodle ‚Äì and GIFT ‚Äì don‚Äôt make this kind of grading easy. If you just indicate which answers are correct in Moodle/GIFT, students can check all the boxes and get 100% (it‚Äôs a pretty well-known hack). You could argue this is a bug in Moodle, and many people have since 2006! Here‚Äôs what this would look like in GIFT:\nWhich of the following are perennial herbs? {\n    ~basil\n    ~dill\n    =fennel\n    =mint\n}\nSo, a way to solve the problem is to give the wrong answers negative weights:\nWhich of the following are perennial herbs? {\n    ~%-25%basil\n    ~%-25%dill\n    ~%50%fennel\n    ~%50%mint\n}\nThis technically works, but what should the values be when you have 3 answers? 5 answers? 6? The design makes it hard to maintain these questions (you have to change all the negative values as you add/remove answers).\nThe maintainable solution I found is to use a matching question with two choices (correct or incorrect). In this example, I used perennial and not perennial (but it could be perennial and annual):\nClassify the following herbs as perennial or not {\n    =basil -&gt; not perennial\n    =dill -&gt; not perennial\n    =fennel -&gt; perennial\n    =mint -&gt; perennial\n}\nUsing a matching question like this, the scoring is done correctly regardless of the number of answers. A drawback to this style is that students have to click in a drop-down menu with two choices (not as easy to use as a checkbox)."
  },
  {
    "objectID": "posts/creating-questions-quickly-gift/index.html#google-forms-add-on-gift-quiz-editor",
    "href": "posts/creating-questions-quickly-gift/index.html#google-forms-add-on-gift-quiz-editor",
    "title": "Creating questions quickly in Moodle with GIFT",
    "section": "Google Forms add-on (GIFT Quiz Editor)",
    "text": "Google Forms add-on (GIFT Quiz Editor)\nIt‚Äôs worth mentioning that the most popular (in terms of measured users) is likely the Google Forms add-on called GIFT Quiz Editor, which at the time of this writing had almost 200,000 users since its re-deployment in February 2020. The rapid popularity of this tool is certainly related to the COVID-19 pandemic and the massive push to move evaluations (quizzes) online. Google Classrooms is a very popular platform in the pandemic, and creating quizzes using GIFT (rather than clicking) is surely of great interest.\nNote that Google‚Äôs quizzes don‚Äôt yet support all of the features of GIFT. For example, individual feedback for each answer in a multiple-choice question is not possible. So, some aspects of Moodle questions supported in GIFT won‚Äôt work with Google, but might one day?\nIt‚Äôs interesting to consider also how one can export via GIFT a question bank from Moodle and create quizzes in Google Forms quickly. Again, Google‚Äôs platform doesn‚Äôt support the notion of question banks (or the reuse of questions from them), but maybe someone is developing an add-on to do it?"
  },
  {
    "objectID": "posts/creating-questions-quickly-gift/index.html#conclusion",
    "href": "posts/creating-questions-quickly-gift/index.html#conclusion",
    "title": "Creating questions quickly in Moodle with GIFT",
    "section": "Conclusion",
    "text": "Conclusion\nGIFT has lots of potential. I hope you can find it saves you time, especially with some of the tools that have been created to make it more useful. Don‚Äôt hesitate to write comments at the bottom of this post, or in the GitHub repositories for the various tools mentioned here."
  },
  {
    "objectID": "posts/creating-questions-quickly-gift/index.html#footnote-why-so-many-clicks-in-moodle",
    "href": "posts/creating-questions-quickly-gift/index.html#footnote-why-so-many-clicks-in-moodle",
    "title": "Creating questions quickly in Moodle with GIFT",
    "section": "Footnote: Why so many clicks in Moodle?",
    "text": "Footnote: Why so many clicks in Moodle?\nIt‚Äôs a topic for another blog entry, but in my opinion (I‚Äôm speculating a bit here) it is because of all the options (which is usually a good thing). But also, the ease of use of the interface (usability) hasn‚Äôt had much love for lots of reasons:\n\nlimited open-source resources\nrequirements for internationalization (e.g., it has to work in Japanese)\nrequirements for different browsers and older Moodle implementations\na good usability design requires data to know what are the most common tasks a Moodle creator does to focus on that workflow\netc.\n\nI know Google Classrooms has a much nicer experience for content creators (Google is great at collecting data at the cost of privacy). But my students haven‚Äôt always found Google Classrooms to have a good experience as students. Also, Google Classrooms is limited in options. I believe Google is sensitive to the cost of managing code for features that are not used enough (they kill projects easily if there are not enough people using them, or maybe they‚Äôre not providing enough data). We all know Google has more resources (and can marshall them more effectively) than the mostly volunteer Moodle project. Finally, it‚Äôs not common for Moodle to remove features because not enough people use them. There is a strong loyalty to old versions and that comes with a cost of growing complexity. So, we click (and maybe complain) as we create our content‚Ä¶\n\nReferences\n\nPhoto credit: ‚Äúquestions‚Äù (CC BY 2.0) by aronbaker2"
  },
  {
    "objectID": "posts/analyzing-java-with-moose/index.html",
    "href": "posts/analyzing-java-with-moose/index.html",
    "title": "Analyzing Java with Moose 8",
    "section": "",
    "text": "Updated 2021-03-15\nMoose is a platform in Pharo that can manipulate models of software, to facilitate analyses including software data mining. In this blog post, I will show you a few features of Moose to analyze a Java project."
  },
  {
    "objectID": "posts/analyzing-java-with-moose/index.html#analysis-overview",
    "href": "posts/analyzing-java-with-moose/index.html#analysis-overview",
    "title": "Analyzing Java with Moose 8",
    "section": "Analysis overview",
    "text": "Analysis overview\nHere‚Äôs an overview of this post:\n\nMoose operates on models of software, namely FAMIX models. To analyze a Java project, you must first create a model of it using a Java-to-Famix parser. In this example, I will use VerveineJ, but it‚Äôs also possible to use JDT2Famix.\nPlantUML is used to create class diagrams of the software in Moose (this is optional). For this post, I installed a local version of the PlantUML server, which also requires an installation of GraphViz."
  },
  {
    "objectID": "posts/analyzing-java-with-moose/index.html#install-moose",
    "href": "posts/analyzing-java-with-moose/index.html#install-moose",
    "title": "Analyzing Java with Moose 8",
    "section": "Install Moose",
    "text": "Install Moose\nTo make this post, I used Moose 8 in Pharo 8, both of which were in development stage at the time of writing this. Here‚Äôs a simple way to get it running:\n\nInstall the Pharo Launcher and start it.\nImportant for Windows 10: click on the VMs button in Pharo Launcher and click the Update button to make sure you have the latest (most stable) Pharo virtual machines.\nCreate a copy of the image of Moose-8 from the Inria CI: New Image Templates &gt; Official distributions &gt; Moose Suite 8.0 (development version) &gt; Create image\n&gt; Warning: Windows 10 users will want to remove the spaces from the name of the image, or else they may cause problems in the scripts in this tutorial. You can name the image Moose8JavaTutorial, for example.\nLaunch the image once it has downloaded."
  },
  {
    "objectID": "posts/analyzing-java-with-moose/index.html#clone-the-java-project-you-want-to-analyze",
    "href": "posts/analyzing-java-with-moose/index.html#clone-the-java-project-you-want-to-analyze",
    "title": "Analyzing Java with Moose 8",
    "section": "Clone the Java project you want to analyze",
    "text": "Clone the Java project you want to analyze\n\nIn this step, let‚Äôs assume there is a GitHub repository of a Java project that we want to analyze, e.g., the source code from Head First Design Patterns. In this step we will get a local copy of the source code using git clone, so git needs to be installed on your machine and visible from the execution path. The MooseEasyUtility class will clone it in a temporary folder of the Pharo image directory.\nOpen a Moose Playground (CTRL+O+W) in Pharo, and execute the following:\njavaProjectFileRef := MooseEasyUtility cloneGitHubRepo:\n    'https://github.com/bethrobson/Head-First-Design-Patterns'.\nThis will create a clone of the Java repo from GitHub in your Pharo working directory, with a relative path of tmp/MooseEasyRepos/bethrobson__Head-First-Design-Patterns.\n\n\n\n\n\n\nNote\n\n\n\nWe are not using Iceberg to make this clone, but a git clone command run in a Bourne shell via LibC in Pharo. We chose not to use Iceberg because the command runs faster, and there is no memory allocated in the Pharo image for the repository.\nIf you want to analyze Java source code, you can use any directory ‚Äì it doesn‚Äôt have to be a git repository and you don‚Äôt have to create it using the above command.\nIn Pharo under Windows, you will briefly see a cmd.exe window appear during the execution of the command. This is a ‚Äúgotcha‚Äù also discussed in the LibC post."
  },
  {
    "objectID": "posts/analyzing-java-with-moose/index.html#parse-java-to-make-famix-model",
    "href": "posts/analyzing-java-with-moose/index.html#parse-java-to-make-famix-model",
    "title": "Analyzing Java with Moose 8",
    "section": "Parse Java to make FAMIX model",
    "text": "Parse Java to make FAMIX model\n\nOnce we have a local copy (clone) of the source code, we can make the FAMIX model of it using a parser such as VerveineJ, which is supported by Moose-Easy. To install VerveineJ for our purposes, it‚Äôs simple:\n\nMake sure a Java Runtime Environment (java command) is in the execution path of your system. To verify, execute the following in a Moose Playground:\n\n(LibC runCommand: 'java --version') = 0 \n    ifTrue: 'java command found.' \n    ifFalse: 'java command NOT FOUND.'\n\nDownload and unzip VerveineJ 1.0 with the following commands in a Moose Playground:\n\n\nUIManager default\n    informUserDuring: [ :bar | \n        bar label: 'Downloading VerveineJ 1.0.1...'.\n        [ | client |\n        client := ZnClient new.\n        client\n            signalProgress: true;\n            url: 'https://github.com/moosetechnology/VerveineJ/archive/v1.0.1.zip';\n            downloadTo: FileLocator imageDirectory.\n        client isSuccess\n            ifTrue: [ ZipArchive new\n                    readFrom: 'v1.0.1.zip';\n                    extractAllTo: FileLocator imageDirectory.\n\n                \"Permissions may not be set with ZipArchive#extractAllTo:\"\n                \"Note: This fails (silently) in a Windows VM\"\n                LibC runCommand: 'chmod u+x VerveineJ-1.0.1/verveinej.sh' ]\n            ifFalse: [ self inform: 'Download failed.' ] ]\n            on: HTTPProgress\n            do: [ :progress | \n                bar label: progress printString.\n                progress isEmpty\n                    ifFalse: [ bar current: progress percentage ].\n                progress resume ] ]\nIf the download works, the VerveineJ importer will be in your Pharo working directory, with a relative path of VerveineJ-1.0.1.\nOnce you have VerveineJ, there are two ways to create the FAMIX model from the Java source code:\n\nStart the FamixMaker tool in the menu Moose &gt; Moose Tools &gt; Famix Maker (or you can execute MooseEasyFamixMakerPresenter open in a Moose Playground). You supply the paths to the source code, the VerveineJ parser script verveinej.sh and the destination MSE (FAMIX) file. With the relative paths of the examples above, the Java source to parse is at tmp/MooseEasyRepos/bethrobson__Head-First-Design-Patterns, the VerveineJ parser is at VerveineJ-1.0.1/verveinej.sh and we choose the name HFDP.mse to be the MSE file to be stored in tmp:\n\nClick Generate MSE File when all the fields are correct. As before, in Windows you will see the cmd.exe window and even the execution of a shell script.\nAlternatively, use a programmatic interface. In the same Moose Playground where we cloned the source and VerveineJ parser above, invoke it like this:\n\n\nwizard := MooseEasyFamixMaker\n        generateMSETo: 'tmp/HFDP.mse' asFileReference\n        parsing: 'tmp/MooseEasyRepos/bethrobson__Head-First-Design-Patterns' asFileReference\n        with: 'VerveineJ-1.0.1/verveinej.sh' asFileReference.\nwizard generateMSE.\nEither way, at the end of this step there should be a file tmp/HFDP.mse that is the FAMIX model of the Java source code."
  },
  {
    "objectID": "posts/analyzing-java-with-moose/index.html#load-model-of-java-source-into-moose",
    "href": "posts/analyzing-java-with-moose/index.html#load-model-of-java-source-into-moose",
    "title": "Analyzing Java with Moose 8",
    "section": "Load model of Java source (into Moose)",
    "text": "Load model of Java source (into Moose)\n\nIf you use the GUI, the following code is generated in the text box at the bottom of the dialog. Otherwise, you can copy it from here, changing the paths for the Java source and MSE files:\n\"Load the moose Model with some error checking\"\n| mseFileRef mseStream mooseModel |\nmseFileRef := 'tmp/HFDP.mse' asFileReference. \"Generated by FamixMaker\"\nmseStream := mseFileRef readStream.\nmseStream\n    ifNotNil: [ \n        mooseModel := MooseModel importFromMSEStream: mseStream. \n        mooseModel rootFolder:\n      'tmp/MooseEasyRepos/bethrobson__Head-First-Design-Patterns'.\n        mooseModel install. \"So it appears in the Panel\"\n        mseStream close. ]\n    ifNil: [ self error: \n    'Could not load MSE file into Moose: ' , mseFileRef asString ]."
  },
  {
    "objectID": "posts/analyzing-java-with-moose/index.html#visualize-a-java-package-in-plantuml",
    "href": "posts/analyzing-java-with-moose/index.html#visualize-a-java-package-in-plantuml",
    "title": "Analyzing Java with Moose 8",
    "section": "Visualize a Java package in PlantUML",
    "text": "Visualize a Java package in PlantUML\n\nThe PlantUML Pharo Gizmo project has a GUI to visualize Moose models. You start the GUI with the following:\n\nClick Moose &gt; Moose Projects &gt; Load PlantUML Gizmo to load the project.\nInvoke the GUI with the following command in a Moose Playground:\nPUGizmoForMoose open.\n\nThe following browser should appear:\n\nClick on the HFDP Moose model on the left to browse to the list of classes and interfaces from the source code.\n\nIn this example, we will focus on a particular package: headfirst::designpatterns::combining::decorator. We can filter the list by adding the following code in the editor at the bottom:\neach mooseName beginsWith: 'headfirst::designpatterns::combining::decorator'\nPress Enter to accept the filter, and you should see a new list:\n\nSelect all the elements in the list by clicking in the list and typing CTRL+A. Then, right-click in the selected list and choose Select:\n\nClick Get the diagram to see the UML class diagram:\n\nYou can change the details of the diagram, to show Inheritance and Aggregation by clicking the respective check boxes.\n\nYou can get a copy of the .png (or .svg) of the diagram by clicking the Copy Current UML Code button, and pasting the code in an editor such as PlantText.com. The following is an SVG version of the diagram generated by PlantUML Gizmo for Moose:"
  },
  {
    "objectID": "posts/analyzing-java-with-moose/index.html#perform-a-moose-analysis-using-pharo",
    "href": "posts/analyzing-java-with-moose/index.html#perform-a-moose-analysis-using-pharo",
    "title": "Analyzing Java with Moose 8",
    "section": "Perform a Moose analysis using Pharo",
    "text": "Perform a Moose analysis using Pharo\n\nMoose combined with Pharo is very powerful mechanism to do analyses on software. In this example, let‚Äôs assume we want to find all the Java classes in the Head First Design Patterns project that implement more than one interface. It helps to understand that in Moose, a Java interface and a Java class are the same FAMIX element. That said, a class element‚Äôs hierarchy can be obtained in several ways in Moose. For now, we will consider the message directSuperclasses, which in Moose returns the direct superclass (or superinterfaces) of a Java class (or interface). As such, we can assume a class implements more than two interfaces if directSuperclasses returns more than two elements. That is, the one (1) superclass of the Java class, and at least two (2) superinterfaces it also implements.\nIn a Moose Playground, type the following Pharo statements:\n\"Get the HFDP model (first in Moose panel)\"\njavaModel := MooseModel root first.\n\"Query all classes that have more than two direct FAMIX superclasses\"\nclassesImplementingMoreThanOneInterface := javaModel allModelClasses \n    select: [ :each | \n        each directSuperclasses size &gt; 2 ]\nClick Do it all and go (Ctrl+Shift+G) to see the list of classes that implement more than one interface.\nClicking on one of the results in the list, e.g., BeatModel (the first one), we can verify the results of the analysis, i.e., that the class implements at least two interfaces, by clicking the Raw tab in the window on the right and typing self directSuperclasses in the text box at the bottom. Typing Ctrl+G (Do it and go) will show the list of elements for this message, which indeed includes two interfaces:\nMetaEventListener in javax::sound::midi (Class)\nBeatModelInterface in headfirst::designpatterns::combined::djview (Class)\nObject in java::lang (Class)\n\n\n\n\n\n\nNote\n\n\n\nThe use of Class in this output is from the Moose‚Äôs meaning, not Java‚Äôs meaning.\n\n\n\nFor more analyses, see The Moose Book."
  },
  {
    "objectID": "posts/analyzing-java-with-moose/index.html#conclusion",
    "href": "posts/analyzing-java-with-moose/index.html#conclusion",
    "title": "Analyzing Java with Moose 8",
    "section": "Conclusion",
    "text": "Conclusion\nThanks to the Moose-Easy and PlantUMLPharoGizmo tools shown in this post, we have shown a relatively easy way to analyze Java projects with Moose."
  },
  {
    "objectID": "posts/analyzing-java-with-moose/index.html#acknowledgements",
    "href": "posts/analyzing-java-with-moose/index.html#acknowledgements",
    "title": "Analyzing Java with Moose 8",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nI am grateful to Professor St√©phane Ducasse and the entire RMoD team for their generosity during my 2018-2019 sabbatical at INRIA Nord Europe Lille, where I learned so much about Pharo, Moose and a productive team culture in open source software engineering."
  },
  {
    "objectID": "posts/cochange-dsm-moose/index.html",
    "href": "posts/cochange-dsm-moose/index.html",
    "title": "Using a DSM to visualize co-change of Java classes",
    "section": "",
    "text": "In a previous post, I explained how to do a DSM from a Java project in Moose. In this post, I will extend the idea to a DSM-based visualization for co-change, again with a Java project using Moose.\n\n\nSimply defined, co-change is the notion that two modules in a project change together. We can identify co-change in a project when multiple modules are committed to a repository together.\nA Design Structure Matrix (DSM) can be used to visualize co-change in a project, e.g., see Geipel and Schweitzer (2012). That is, a cell x,y in the matrix contains the number of times the file x and y were changed in the same commit."
  },
  {
    "objectID": "posts/cochange-dsm-moose/index.html#using-a-dsm-to-visualize-co-change-of-java-classes",
    "href": "posts/cochange-dsm-moose/index.html#using-a-dsm-to-visualize-co-change-of-java-classes",
    "title": "Using a DSM to visualize co-change of Java classes",
    "section": "",
    "text": "In a previous post, I explained how to do a DSM from a Java project in Moose. In this post, I will extend the idea to a DSM-based visualization for co-change, again with a Java project using Moose.\n\n\nSimply defined, co-change is the notion that two modules in a project change together. We can identify co-change in a project when multiple modules are committed to a repository together.\nA Design Structure Matrix (DSM) can be used to visualize co-change in a project, e.g., see Geipel and Schweitzer (2012). That is, a cell x,y in the matrix contains the number of times the file x and y were changed in the same commit."
  },
  {
    "objectID": "posts/cochange-dsm-moose/index.html#sample-co-change-data-mined-from-git",
    "href": "posts/cochange-dsm-moose/index.html#sample-co-change-data-mined-from-git",
    "title": "Using a DSM to visualize co-change of Java classes",
    "section": "Sample co-change data mined from git",
    "text": "Sample co-change data mined from git\nCo-change information can easily be extracted from a git repo‚Äôs history. The following comma-separated file was generated from a git repo using features of the GitMiner project (but we leave the details for another day). For now, let‚Äôs look at how the file is formatted:\n9a300b2,src/ClientNoFactoryMain.java,src/no_factory/ProductA.java\n7c6d160,src/simple_factory/ProductA.java,src/simple_factory/SimpleFactory.java\n544262f,src/no_factory/ProductA.java\n908c96e,src/ClientNoFactoryMain.java,src/no_factory/ProductA.java\n9f09084,src/ClientWithUnprotected.java,src/NoInterfaceClient.java\nThe format is commitID , file1.java , file2.java , ‚Ä¶ where a commit can have any number of java files.\n\nNote, this is not really a consistent CSV format, since the number of columns can vary at each line.\n\nWe can see that at commit 9a300b2 the files src/ClientNoFactoryMain.java and src/no_factory/ProductA.java were committed together, meaning there was a co-change link. We can also see that those two files were also implicated in the same commit 908c96e.\nCommit 544262f only had a single file committed, so there is no co-change there."
  },
  {
    "objectID": "posts/cochange-dsm-moose/index.html#visualizing-co-change-in-a-dsm",
    "href": "posts/cochange-dsm-moose/index.html#visualizing-co-change-in-a-dsm",
    "title": "Using a DSM to visualize co-change of Java classes",
    "section": "Visualizing co-change in a DSM",
    "text": "Visualizing co-change in a DSM\nFor this visualization, in the GitMiner project there‚Äôs a Pharo class called GMCochangeMatrix, which serves as a model for the visualization class, RTCochangeDSM, which is a subclass of RTAbstractDSM. It redefines some methods in the visualization to work with the GMCochangeMatrix model.\n\nMy design here is surely not optimal; there is likely a better way to make this work, but I was interested in getting results for my research. Constructive comments are welcome at the bottom of this post.\n\nFor the following code to work, you first have to load the GitMiner project in Pharo 7, following the instructions on the repo‚Äôs page. Once it‚Äôs loaded, you can open a Moose Playground and paste the following code that uses the sample co-change data and FAMIX model for the FactoryVariants project in Java:\n| mooseModel mseFileRef commitTransactions transactionsFileRef \n  classes changeHistoryMatrix cochangeMatrix dsm |\nmseFileRef := GMUtility resourcesFileReference\n    / 'FactoryVariants_HEAD.mse'.\nmooseModel := GMUtility loadMooseModelFromMSE: mseFileRef.\ntransactionsFileRef := GMUtility resourcesFileReference\n    / 'FactoryVariants_9f09084-END_WithMiningMetadata_selected_selected_TR.csv'.\ncommitTransactions := GMUtility\n    loadCommitTransactions: transactionsFileRef asFileReference.\n\"reject the uninteresting classes (smaller DSM)\"\nclasses := (GMUtility mooseClassesForDependencyMining: mooseModel)\n    reject: [ :c | c mooseName beginsWith: 'headfirst' ].\nchangeHistoryMatrix := GMUtility\n    changeHistoryMatrixFromTransactions: commitTransactions\n        classes: classes.\ncochangeMatrix := GMUtility\n    cochangeMatrixFromChangeHistory: changeHistoryMatrix\n    forClasses: classes.\ndsm := RTCochangeDSM new.\n\"Order the elements in the matrix by their mooseName\"\ndsm objects: (classes asSortedCollection:\n    [ :a :b | a mooseName &lt; b mooseName ]).\n\"Change the default label from asString which is very long\"\ndsm labelShapeX label text: #mooseName.\ndsm labelShapeY label text: #mooseName.\ndsm cochangeMatrix: cochangeMatrix.\ndsm rotation: 270.\n^dsm\nHere‚Äôs the visualization in action, when you Do it all and go:\n\n\n\nRoassal CoChangeDSM visualization\n\n\nThe GMCochangeMatrix has the following properties with respect to the cells on its diagonal (Geipel and Schweitzer 2012):\n\nThe cell m,m contains the total number of times class m was changed.\nThe sum of the diagonal is the total number of changes.\n\nIn Pharo, you can send the message GMCochangeMatrix&gt;&gt;#cochangeMatrix to obtain a PMMatrix (part of PolyMath) and then get its principalDiagonal. Converting the diagonal to an Array allows you to get its sum. To demonstrate the above properties, insert the following before the ^dsm line in the example above:\nTranscript show: 'Diagonal: '\n  , cochangeMatrix cochangeMatrix principalDiagonal asString; cr.\nTranscript show: 'Total changes: ', \n  (cochangeMatrix cochangeMatrix principalDiagonal asArray sum)\n      asString.\nOn the Pharo transcript, you should see:\nDiagonal: a PMVector(2 0 1 1 3 0 0 0 1 0 0 1 0 0 0 0)\nTotal changes: 9"
  },
  {
    "objectID": "posts/libc-pharo-experiments/index.html",
    "href": "posts/libc-pharo-experiments/index.html",
    "title": "LibC experiments in Pharo 7",
    "section": "",
    "text": "I‚Äôve done some work in Pharo that required interfacing with external tools (Java, R, etc.) on multiple platforms. I investigated using OSProcess and OSSubProcess, but there is inconsistency within these packages and they‚Äôre not fully supported on Windows 10. So, for the work I‚Äôve done I‚Äôve found LibC to be the best choice."
  },
  {
    "objectID": "posts/libc-pharo-experiments/index.html#whats-libc",
    "href": "posts/libc-pharo-experiments/index.html#whats-libc",
    "title": "LibC experiments in Pharo 7",
    "section": "What‚Äôs LibC?",
    "text": "What‚Äôs LibC?\nLibC is a class in Pharo, and its comment from Pharo 7 (as of the time of this blog) says:\n\nI‚Äôm a module defining access to standard LibC. I‚Äôm available under Linux and OSX, but not under Windows for obvious reasons :)\n\nThis comment is actually not accurate, as LibC does work quite well under Windows 10 in Pharo 7.\n\nWhat can you do with LibC?\nUsing the resultOfCommand: method, you can call other programs on your system through a unix-like shell and get the output (stdout) in return.\nLibC resultOfCommand: 'echo $0'.  \"&gt;&gt;&gt; 'sh'\"\nFrom the above, you can see that commands are executed in a Bourne shell (sh).\nLibC resultOfCommand: 'date'.  \n  \"&gt;&gt;&gt; 'Fri Mar 15 23:47:47 STD 2019'\"\nThe resultOfCommand: shows you standard output (only). If you want to check for success or failure of a command, use runCommand:. The method returns 0 if the call is successful.\nresult := LibC runCommand: 'date'.  \"&gt;&gt;&gt; 0\"\nIf you want to check the result and get the output (stdout), you can redirect the output to a file on the disk and then load it:\nresult := LibC runCommand: 'date &gt; dateOutput'. \"&gt;&gt;&gt; 0\"\n'dateOutput' asFileReference contents lines. \n  \"&gt;&gt;&gt; #('Fri Mar 15 23:48:24 STD 2019')\"\nIf you want to capture the errors (stderr), you can redirect them to a different file and load it:\nresult := LibC runCommand: 'bogusCommand 2&gt; errors'. \n  \"&gt;&gt;&gt; 32512\"\n'errors' asFileReference contents lines. \n  \"&gt;&gt;&gt; #('sh: 1: bogusCommand: not found')\"\nYou can check the result, capturing both output and errors by combining the two redirections as follows:\nresult := LibC runCommand: \n  'ls BogusFile pharo.version &gt;output 2&gt; errors'. \n  \"&gt;&gt;&gt; 512\"\n'output' asFileReference contents lines. \n  \"&gt;&gt;&gt; #('pharo.version')\"\n'errors' asFileReference contents lines. \n  \"&gt;&gt;&gt; #('ls: cannot access ''BogusFile'': No such file or directory')\"\nA more programmatic way would be to use variables:\ncommand := 'ls BogusFile pharo.version'.\noutputFileName := 'output'.\nerrorFileName := 'errors'.\nresult := LibC runCommand: command , \n  ' &gt;' , outputFileName , \n  ' 2&gt;' , errorFileName.\noutputFileName asFileReference contents lines. \n  \"&gt;&gt;&gt; #('pharo.version')\"\nerrorFileName asFileReference contents lines. \n  \"&gt;&gt;&gt; #('ls: cannot access ''BogusFile'': No such file or directory')\"\n\n\nEnvironment variables in a LibC command\nLet‚Äôs use an example with an environment variable we set using OSEnvironment (also compatible with Windows, MacOS and Unix). We can use a git command to extract a revision of a git repo into a temporary directory, called the GIT_WORK_TREE. When you pass environment variables, they need to be defined using the local file system‚Äôs path syntax. If you use Path in Pharo, you can achieve a multi-platform solution.\nFirst I check out the revision to a work-tree as follows:\n\"I cloned earlier my repo into a directory \n tmp/tempClonesPharo relative to my Pharo image\"\nrepoPath := Path * 'tmp' / 'tempClonesPharo' / repoName.\n\"some path to the checkout destination, \n which will be pointed to using GIT_WORK_TREE\"\ncheckoutDest := Path * 'tmp' / 'tempClonesPharo' / ('checkout' , oid). \nOSEnvironment current\n    setEnv: 'GIT_WORK_TREE'\n    value: checkoutDest fullName.\n\"Command to extract the revision from git into \n a temp dir so we can generate an MSE file for it\"\ncommand := 'cd \"' , repoPath fullName , \n  '\" && git checkout ' , oid , \n  ' -- . 2&gt;\"' , gitErrors fullName , '\"'.\n\"Work_tree must exist\"\ncheckoutDest ensureCreateDirectory.\nresult := LibC runCommand: command.\nresult = 0\n    ifFalse: [ \"maybe display the gitErrors file to the user \n                or try to process it somehow \" ]\nIt‚Äôs interesting to note that when this code runs on Windows 10, GIT_WORK_TREE will have a value using Windows paths, e.g.¬†C:\\Users\\... whereas running on Linux (or MacOS), it will have a unix-like form, e.g., /home/users/....\nSo, when specifying paths inside a LibC command (e.g., to redirect output to files, to change directories with cd, etc.), you can use unix-like syntax regardless of the platform. However, when using environment variables that have paths used by commands like git, which is a platform-specific implementation, the paths must take the platform-specific form. If you use Path and fullname as above, you can achieve this.\n\n\nChanging the working directory for LibC commands\nI am not aware of a way to specify the working directory for a runCommand: before it is run. Therefore, you must combine commands. First make a change of directory using cd and combine it with the following command using the && (and if) Bourne shell keyword, which says if the previous command succeeded, then execute the following command. You can see how that works from the git example above:\ncommand := 'cd \"' , repoPath fullName , \n  '\" && git checkout ' , oid , \n  ' -- . 2&gt;\"' , gitErrors fullName , '\"'.\n\n\nQuoting path names that have spaces\nSince paths (especially on Windows) can have spaces, it‚Äôs better to surround them with quotes in LibC runCommand:. You can see the example above of how it‚Äôs done.\n\n\nIntegrating other tools with Pharo through LibC\nUsing the techniques described here, I‚Äôve managed to make Pharo 7 work with perl (to leverage full blown regular expressions not currently available in Pharo), git, java and even R, on all three platforms supported by Pharo.\n\n\nGotchas\nOn Windows, LibC runCommand: opens up a CMD.exe window that will acquire the focus and as of the time of this blog‚Äôs writing, can‚Äôt be programmatically placed in the background. This can be either good (e.g., it‚Äôs useful for the user to see that a long command is executing) or bad (it‚Äôs annoying when a bunch of short perl commands pop up in succession).\nIt can be problematic to run a LibC runCommand: that expects something on stdin. I didn‚Äôt experiment much with this, but I think your Pharo image will block until some input is generated.\nEscaping special characters in the Bourne shell (combined with using perl regex one-liners) can be very complex. Passing information to commands via environment variables as explained above helps a lot. For example, since regular expressions can contain special characters that need to be escaped (if defined as strings in perl, or passed as one-line arguments), the following snippet shows how to pass them (it‚Äôs a regex to validate imperfectly a URL):\nOSEnvironment current setEnv: 'myregex' \n  value: '^(?:\\w+:)?\\/\\/([^\\s\\.]+\\.\\S{2}|localhost[\\:?\\d]*)\\S*$'.\n\"save the text to search to a file to be used in perl\"\n'/tmp/textToSearch' asFileReference\n    ensureDelete;\n    writeStreamDo: [ :fileStream | fileStream \n    nextPutAll: 'http://example.com/this_is_a_sample_URL/test' ].\ncommand := 'perl -0777 -n ' ,\n  '-e ''while(m/$ENV{myregex}/g){print \"$&\\n\";}'' ', \n  '/tmp/textToSearch &gt; /tmp/regexmatches'.\nresult := LibC runCommand: command.\nmatches := '/tmp/regexmatches' asFileReference \n  contents lines."
  },
  {
    "objectID": "posts/szz-unleashed-github-bugs/index.html",
    "href": "posts/szz-unleashed-github-bugs/index.html",
    "title": "SZZ (unleashed) using GitHub",
    "section": "",
    "text": "Now it‚Äôs possible to use SZZ Unleashed with bug databases that are in GitHub (rather than Jira).\nThanks to excellent collaboration with Yacine Khiter (a summer intern via the Mitacs Global Research Internship program), the SZZ Unleashed (open source) implementation on GitHub was forked and has a prototype that can use GitHub as a source for bug data.\nYou can find the details here, including a pipeline for a small (trivial) empirical study (including some code in Pharo that runs from Python) that aims to correlate the number of bugs with the size of files (for TypeScript projects).\n\n\n\nUML activity diagram explaining the pipeline"
  },
  {
    "objectID": "blogging-allowed.html",
    "href": "blogging-allowed.html",
    "title": "Blogging Allowed",
    "section": "",
    "text": "Improved modeling of TypeScript generics and their concretizations\n\n\n\n\n\n\nMoose\n\n\nTypeScript\n\n\n\n\n\n\n\n\n\nOct 22, 2024\n\n\nNour Ayechi\n\n\n\n\n\n\n\n\n\n\n\n\nTypeScript support for Moose (Pharo)\n\n\n\n\n\n\nMoose\n\n\nTypeScript\n\n\n\n\n\n\n\n\n\nSep 15, 2023\n\n\nChristopher Fuhrman\n\n\n\n\n\n\n\n\n\n\n\n\nSZZ (unleashed) using GitHub\n\n\n\n\n\n\nEmpirical analyses\n\n\nGitHub\n\n\nSZZ\n\n\n\n\n\n\n\n\n\nSep 15, 2023\n\n\nChristopher Fuhrman\n\n\n\n\n\n\n\n\n\n\n\n\nOpen Educational Resource (OER) in French\n\n\n\n\n\n\nOER\n\n\nOpen Source\n\n\nQuarto\n\n\n\n\n\n\n\n\n\nMay 22, 2023\n\n\nChristopher Fuhrman\n\n\n\n\n\n\n\n\n\n\n\n\nGetting the most from markdown in GIFT\n\n\n\n\n\n\nMoodle\n\n\nGIFT\n\n\nmarkdown\n\n\n\n\n\n\n\n\n\nDec 15, 2021\n\n\nChristopher Fuhrman\n\n\n\n\n\n\n\n\n\n\n\n\nCreating questions quickly in Moodle with GIFT\n\n\n\n\n\n\nMoodle\n\n\nGIFT\n\n\n\n\n\n\n\n\n\nDec 18, 2020\n\n\nChristopher Fuhrman\n\n\n\n\n\n\n\n\n\n\n\n\nPlantUML Gizmo bundled for Google Docs and Slides\n\n\nYou can now do PlantUML in Google Slides and Docs.\n\n\n\nPlantUML\n\n\n\n\n\n\n\n\n\nNov 24, 2019\n\n\nChristopher Fuhrman\n\n\n\n\n\n\n\n\n\n\n\n\nUsing a DSM to visualize co-change of Java classes\n\n\nI will show a DSM-based visualization for co-change with a Java project using Moose and Pharo.\n\n\n\nMoose\n\n\nJava\n\n\nDSM\n\n\n\n\n\n\n\n\n\nAug 7, 2019\n\n\nChristopher Fuhrman\n\n\n\n\n\n\n\n\n\n\n\n\nDependency Structure Matrix for a Java project using Moose\n\n\nI will show how one can create a Design Structure Matrix (DSM) in Moose, in particular from a model of a Java project.\n\n\n\nMoose\n\n\nJava\n\n\nDSM\n\n\n\n\n\n\n\n\n\nAug 6, 2019\n\n\nChristopher Fuhrman\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyzing Java with Moose 8\n\n\nMoose is a platform in Pharo that can manipulate models of software, to facilitate analyses including software data mining.\n\n\n\nMoose\n\n\nPharo\n\n\nJava\n\n\nPlantUML\n\n\n\n\n\n\n\n\n\nJul 29, 2019\n\n\nChristopher Fuhrman\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the GitHub API in Pharo 7\n\n\nIn my mining activities with Pharo, I found it useful to query GitHub to select projects to mine.\n\n\n\n\n\n\n\n\nMar 22, 2019\n\n\nChristopher Fuhrman\n\n\n\n\n\n\n\n\n\n\n\n\nLibC experiments in Pharo 7\n\n\n\n\n\n\nPharo\n\n\n\n\n\n\n\n\n\nMar 16, 2019\n\n\nChristopher Fuhrman\n\n\n\n\n\n\n\n\n\n\n\n\nRunning Pharo in Windows Subsystem for Linux (WSL)\n\n\n\n\n\n\nPharo\n\n\nWSL\n\n\nWindows\n\n\n\n\n\n\n\n\n\nFeb 27, 2019\n\n\nChristopher Fuhrman\n\n\n\n\n\n\nNo matching items"
  }
]